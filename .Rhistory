max_puppies <- round(1000/puppy_price)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
?substr
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
intro
last_letter <- nchar(lyric)
fruits <- substr(lyric, 15, last_letter)
fruits
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- sub("a", "e", lyrics)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- sub("a", "e", lyric)
fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "e", lyric)
fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_e <- gsub("a", "o", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "e", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", lyric)
fruits_o
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro
lyric_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + substr(fruits_e, 15, last_letter)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, substr(fruits_e, 15, last_letter))
lyric_e
lyric_e <- c(intro, substr(fruits_e, 15, last_letter))
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_e, 15, last_letter)))
lyric_e <- cbind(intro, substr(fruits_e, 15, last_letter))
print(lyric_e)
add_three <- function(a) {
a + 3
}
add_three(3)
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
total_inches <- feet * 12 + inches
meters <- 0.0254 * total_inches
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 3)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
lyric_e <- c(intro, substr(fruits_e, 15, last_letter))
print(lyric_e)
lyric_e <- c(intro, substr(fruits_e, 15, nchar(fruits_e)))
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_o, 15, nchar(fruits_o)))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_o, 15, nchar(fruits_o)))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, substr(fruits_o, 15, nchar(fruits_o))))
shiny::runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='allil', token='C20ADEBF46E17FF3A0AC7CAEDC5D0EE9', secret='2IqBT6gk7P7503g2QvvDZ0ccf78cutjVfl3ZqOnn')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
shiny::runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
styler:::style_active_file()
runApp('C:/Users/allic/Desktop/info201/a8-shiny-alliL')
library(httr)
library(jsonlite)
source("api_key.R")
endpoint <- "https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX3rxVfibe1L0"
query_params <- list(client_id = spotify_id, response_type = "code",
redirect_uri= "https%3A%2F%2Fexample.com%2Fcallback")
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(endpoint)
parsed_data <- fromJSON(content(response, "text"))
View(parsed_data)
setwd("C:/Users/allic/Desktop/info201/squadBF2")
library(httr)
library(jsonlite)
source("api_key.R")
endpoint <- "https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX3rxVfibe1L0"
query_params <- list(client_id = spotify_id, response_type = "code",
redirect_uri= "https%3A%2F%2Fexample.com%2Fcallback")
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(endpoint)
parsed_data <- fromJSON(content(response, "text"))
View(parsed_data)
endpoint <- "https://api.spotify.com/v1/users/spotify/playlists/37i9dQZF1DX3rxVfibe1L0"
query_params <- list(client_id = spotify_id, response_type = "code",
redirect_uri= "https%3A%2F%2Fexample.com%2Fcallback")
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(endpoint, query = query_params)
parsed_data <- fromJSON(content(response, "text"))
View(parsed_data)
library(devtools)
install_github("tiagomendesdantas/Rspotify")
source(api_key.R)
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
user <- getUser("t.mendesdantas",token=keys)
source(api_key.R)
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
user <- getUser("t.mendesdantas",token=keys)
library(Rspotify)
source(api_key.R)
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
user <- getUser("t.mendesdantas",token=keys)
library(Rspotify)
source("api_key.R")
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
user <- getUser("t.mendesdantas",token=keys)
View(user)
user <- getUser("12168600676",token=keys)
View(user)
playlist <- getPlaylist("37i9dQZF1DX3rxVfibe1L0",token=keys)
View(playlist)
playlist <- getPlaylist("thewhitehouse",token=keys)
playlist <- getPlaylist("thewhitehouse",token=keys)
topsongs <- getPlaylistSongs("spotify","4hOKQuZbraPDIfaGbM3lKI",token=keys)
View(topsongs)
topsongs <- getPlaylistSongs("spotify","37i9dQZF1DX3rxVfibe1L0",token=keys)
View(topsongs)
song<-getFeatures("0y5HWbAnJ6qrjeBuFL52hO",token=keys)
View(song)
song<-getFeatures("37i9dQZF1DX3rxVfibe1L0",token=keys)
View(song)
for i in topsongs:
print(i)
for song in topsongs:
print(song)
View(topsongs)
for (row in 1:nrow(topsongs)) {
print(row)
}
View(stock)
for (row_num in 1:nrow(topsongs)) {
print(topsongs[row, ])
}
View(topsongs)
topsongs[1,]
library(Rspotify)
source("api_key.R")
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
mood_booster <- getPlaylistSongs("spotify","37i9dQZF1DX3rxVfibe1L0",token=keys)
dataset <- data.frame()
for (row_num in 1:nrow(mood_booster)) {
dataset <- mood_booster[row, ]
}
song<-getFeatures("0y5HWbAnJ6qrjeBuFL52hO", token=keys)
View(mood_booster)
View(mood_booster)
song<-getFeatures("6XlSyYFTU1nodeWwwzVgTV", token=keys)
View(song)
mood_booster[row, ] %>% id
library(dplyr)
mood_booster[row, ] %>% id
mood_booster[1, ] %>% id
mood_booster[1, ]
mood_booster[1, ]$id
dataset <- data.frame()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row, ]$id
dataset <- rbind(song, dataset)
}
View(dataset)
dataset <- rbind(song, dataset)
dataset <-rbind(mood_booster[1, ]$id, dataset)
View(dataset)
dataset <- data.frame()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row, ]$id
dataset <- rbind(getFeatures(song, token=keys), dataset)
}
View(dataset)
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row, ]$id
datalist[[i]] <- rbind(getFeatures(song, token=keys), dataset)
}
dataset <- do.call(rbind, datalist)
View(dataset)
for (i in 1:5) {
# ... make some data
dat <- data.frame(x = rnorm(10), y = runif(10))
dat$i <- i  # maybe you want to keep track of which iteration produced it?
datalist[[i]] <- dat # add it to your list
}
big_data = do.call(rbind, datalist)
View(big_data)
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row, ]$id
datalist[[i]] <- rbind(getFeatures(song, token=keys), dataset)
}
dataset = do.call(rbind, datalist)
View(dataset)
song<-getFeatures("6XlSyYFTU1nodeWwwzVgTV", token=keys)
datalist = list()
for (i in 1:5) {
# ... make some data
dat <- data.frame(x = rnorm(10), y = runif(10))
dat$i <- i  # maybe you want to keep track of which iteration produced it?
datalist[[i]] <- dat # add it to your list
}
big_data = do.call(rbind, datalist)
View(big_data)
typeof(mood_booster[1, ]$id)
typeof(getFeatures("6XlSyYFTU1nodeWwwzVgTV", token=keys))
as.data.frame(getFeatures("6XlSyYFTU1nodeWwwzVgTV", token=keys))
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row, ]$id
datalist[[i]] <- as.data.frame(getFeatures(song, token=keys))
}
dataset = do.call(rbind, datalist)
View(dataset)
test <- as.data.frame(getFeatures("6XlSyYFTU1nodeWwwzVgTV", token=keys))
View(test)
for (i in 1:5) {
# ... make some data
dat <- data.frame(x = rnorm(10), y = runif(10))
dat$i <- i  # maybe you want to keep track of which iteration produced it?
print(typeof(dat))
datalist[[i]] <- dat # add it to your list
}
typeof(getFeatures(song, token=keys))
typeof(getFeatures("6XlSyYFTU1nodeWwwzVgTV", token=keys))
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row, ]$id
datalist[[i]] <- getFeatures(song, token=keys)
}
dataset = do.call(rbind, datalist)
View(dataset)
for (i in 1:5) {
# ... make some data
dat <- data.frame(x = rnorm(10), y = runif(10))
dat$i <- i  # maybe you want to keep track of which iteration produced it?
print(typeof(dat))
datalist[[i]] <- dat # add it to your list
}
big_data = do.call(rbind, datalist)
View(big_data)
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row, ]$id
print(song)
datalist[[i]] <- getFeatures(song, token=keys)
}
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row_num, ]$id
print(song)
datalist[[i]] <- getFeatures(song, token=keys)
}
dataset = do.call(rbind, datalist)
View(dataset)
View(big_data)
for (i in 1:5) {
# ... make some data
dat <- data.frame(x = rnorm(10), y = runif(10))
dat$i <- i  # maybe you want to keep track of which iteration produced it?
print(typeof(dat))
datalist[[i]] <- dat # add it to your list
print(typeof(datalist[[i]]))
}
for (i in 1:5) {
# ... make some data
dat <- data.frame(x = rnorm(10), y = runif(10))
dat$i <- i  # maybe you want to keep track of which iteration produced it?
datalist[[i]] <- dat # add it to your list
print(typeof(dat), typeof(datalist[[i]]))
}
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row_num, ]$id
datalist[[i]] <- getFeatures(song, token=keys)
print(datalist)
}
datalist <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row_num, ]$id
datalist[[row_num]] <- getFeatures(song, token=keys)
}
dataset = do.call(rbind, datalist)
View(dataset)
playlist <- full_join(mood_booster, playlist_features_only)
# get a playlist
mood_booster <- getPlaylistSongs("spotify", "37i9dQZF1DX3rxVfibe1L0", token = keys)
# get features for songs in the playlist
raw_playlist_features <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
playlist <- full_join(mood_booster, playlist_features_only)
library(Rspotify)
library(dplyr)
# sourcing credentials such as client ID and client secret
source("api_key.R")
# set credentials for the Spotify API
# "Song Analysis" is what I called my Spotify project
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
# get a playlist
mood_booster <- getPlaylistSongs("spotify", "37i9dQZF1DX3rxVfibe1L0", token = keys)
# get features for songs in the playlist
raw_playlist_features <- list()
for (row_num in 1:nrow(mood_booster)) {
song <- mood_booster[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
playlist <- full_join(mood_booster, playlist_features_only)
View(playlist)
kpop <- getPlaylistSongs("124allison", "607LQNRPyF6LEDG6ewzMyi", token = keys)
# used Rspotify library to access Spotify API
# see documentation here: https://www.r-bloggers.com/my-new-r-package/
library(Rspotify)
# sourcing credentials such as client ID and client secret
source("api_key.R")
# set credentials for the Spotify API
# "Song Analysis" is what I called my Spotify project
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
# get a playlist
mood_booster <- getPlaylistSongs("spotify", "37i9dQZF1DX3rxVfibe1L0", token = keys)
kpop <- getPlaylistSongs("124allison", "607LQNRPyF6LEDG6ewzMyi", token = keys)
kpop <- getPlaylistSongs("12168600676", "66BAIxJsmVcPVf5M4p5oUs", token = keys)
kms_hours <- getPlaylistSongs("12168600676", "66BAIxJsmVcPVf5M4p5oUs", token = keys)
kpop <- getPlaylistSongs("124allison", "607LQNRPyF6LEDG6ewzMyi", token = keys)
View(kpop)
# get a playlist
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
# get features for songs in the playlist
# takes a playlist dataframe
get_playlist_features <- function(playlist_user, playlist_ID) {
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- mood_booster[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
playlist <- full_join(mood_booster, playlist_features_only)
return(playlist)
}
# get a playlist
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
source("data_wrangling.R")
# get a playlist
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
# get a playlist
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
setwd("C:/Users/allic/Desktop/info201/squadBF2")
# get a playlist
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
# set credentials for the Spotify API
# "Song Analysis" is what I called my Spotify project
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
# used Rspotify library to access Spotify API
# see documentation here: https://www.r-bloggers.com/my-new-r-package/
library(Rspotify)
# sourcing credentials such as client ID and client secret
source("api_key.R")
# set credentials for the Spotify API
# "Song Analysis" is what I called my Spotify project
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
# get a playlist
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
print(test)
styler:::style_active_file()
print(test)
print(hello)
US_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbLRQDuF5jeBp")
global_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbMDoHDwVN2tF")
# used Rspotify library to access Spotify API
# see documentation here: https://www.r-bloggers.com/my-new-r-package/
library(Rspotify)
# sourcing credentials such as client ID and client secret
source("api_key.R")
# set credentials for the Spotify API
# "Song Analysis" is what I called my Spotify project
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
# get features for songs in the playlist
get_playlist_features <- function(playlist_user, playlist_ID) {
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- mood_booster[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
playlist <- full_join(mood_booster, playlist_features_only)
return(playlist)
}
# Some playlists.
# To get the "playlist user" and "playlist ID", right click on a spotify
# playlist and go to 'Share' > 'Copy Spotify URI'
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
US_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbLRQDuF5jeBp")
global_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbMDoHDwVN2tF")
# used Rspotify library to access Spotify API
# see documentation here: https://www.r-bloggers.com/my-new-r-package/
library(Rspotify)
# sourcing credentials such as client ID and client secret
source("api_key.R")
# set credentials for the Spotify API
# "Song Analysis" is what I called my Spotify project
keys <- spotifyOAuth("Song Analysis", client_id, client_secret)
# get features for songs in the playlist
get_playlist_features <- function(playlist_user, playlist_ID) {
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- playlist[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
playlist <- full_join(mood_booster, playlist_features_only)
return(playlist)
}
# Some playlists.
# To get the "playlist user" and "playlist ID", right click on a spotify
# playlist and go to 'Share' > 'Copy Spotify URI'
mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
US_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbLRQDuF5jeBp")
global_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbMDoHDwVN2tF")
shiny::runApp('C:/Users/allic/Desktop/info201/ch16-shiny/exercise-1')
runApp()
