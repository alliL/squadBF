<<<<<<< HEAD
my_intro <- make_introduction(my_name, my_age)
casual_intro <- c(my_intro)
casual_intro[1] <- "Hey, I'm"
casual_intro_temp <- c(my_intro)
casual_intro_temp[1] <- "Hey, I'm"
casual_intro <- casual_intro_temp
casual_intro <- paste("Hey, I'm", str_sub(my_intro,name,str_length(my_intro)))
casual_intro <- paste("Hey, I'm", substr(my_intro,name,str_length(my_intro)))
?substituteDirect
casual_intro <- my_intro(substitute("Hey I'm ", "Hello, my name is "))
?str_to_title
??str_to_title
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name,", and I'm ", age," years old.")
return(intro)
}
loud_intro <- toupper(my_intro)
?str_count
??str_count
occurences <- (my_intro, pattern = "e")
occurences <- str_count(my_intro, pattern = "e")
install.packages(stringr)
install.packages("stringr")
occurences <- str_count(my_intro, pattern = "e")
occurences <- str_count(my_intro pattern = "e")
occurences <- str_count(my_intro, pattern = "e")
occurences <- str_count(my_intro, "e")
?tolower
install.packages("stringr")
installed.packages()
is_twice_as_long <- function(character1, character2) {
character1_length <- nchar(character1)
character2_length <- nchar(character2)
return (character1_length > character2_length | character2_length >character1_length |character1_length == character2_length)
}
is_twice_as_long("hey", "girl")
is_twice_as_long <- function(character1, character2) {
character1_length <- nchar(character1)
character2_length <- nchar(character2)
return (character1_length >= character2.length * 2 | character2_length >= character1_length * 2)
}
is_twice_as_long("hey", "girl")
is_twice_as_long <- function(character1, character2) {
character1_length <- nchar(character1)
character2_length <- nchar(character2)
return (character1_length >= character2_length * 2 | character2_length >= character1_length * 2)
}
is_twice_as_long("hey", "girl")
?paste0
describe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
=======
access_token <- get_spotify_access_token()
library(spotifyr)
beatles <- get_artist_audio_features('the beatles')
library(tidyverse)
library(tidyverse)
library(tidyv
)
count(beatles, key_mode, sort = T)
# Retrieve top 100 songs of 2017 playlist
get_playlist_tracks <- function(playlists, access_token = get_spotify_access_token(), show_progress = TRUE) {
if (show_progress == TRUE & nrow(playlists) > 1) {
pb <- txtProgressBar(min = 0, max = nrow(playlists), style = 3)
}
playlist_tracks_df <- map_df(1:nrow(playlists), function(this_playlist) {
num_loops <- ceiling(playlists$playlist_num_tracks[this_playlist] / 100)
df <- map_df(1:num_loops, function(this_loop) {
res <- RETRY('GET', url = playlists$playlist_tracks_url[this_playlist], query = list(access_token = access_token, limit = 100, offset = (100 * this_loop) - 100), quiet = TRUE) %>% content
if (!is.null(res$error)) {
stop(paste0(res$error$message, ' (', res$error$status, ')'))
}
content <- res$items
if (length(content) == 0) {
track_info <- tibble()
>>>>>>> 50be632ea85e11e71661587ba723a893505fb3ed
} else {
last <- "Your strings are the same length!"
last
}
}
describe_difference("brian", "lee")
describe_difference("hey", "econ")
describe_difference('one", "two")
describe_difference("one", "two")
describe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
} else {
last <- paste("Your strings are the same length!")
last
}
}
describe_difference("one", "two")
describe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
} else {
last <- "Your strings are the same length!"
last
}
}
describe_difference("brian", "holy")
# Exercise 4: functions and conditionals
# Define a function `is_twice_as_long` that takes in two character strings, and
# returns whether or not (e.g., a boolean) the length of one argument is greater
# than or equal to twice the length of the other.
# Hint: compare the length difference to the length of the smaller string
is_twice_as_long <- function(character1, character2) {
character1_length <- nchar(character1)
character2_length <- nchar(character2)
return (character1_length >= character2_length * 2 | character2_length >= character1_length * 2)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("hey", "girl")
# Define a function `describe_difference` that takes in two strings. The
# function should return one of the following sentences as appropriate
#   "Your first string is longer by N characters"
#   "Your second string is longer by N characters"
#   "Your strings are the same length!"
describe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
} else {
last <- "Your strings are the same length!"
last
}
}
# Call your `describe_difference` function by passing it different length strings
# to confirm that it works. Make sure to check all 3 conditions
describe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
} else {
last <- "Your strings are the same length!"
last
}
}
describe_difference("brian", "ho")
View(describe_difference)
sd
describe_difference("brian", "rdvd")
escribe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
} else {
last <- "Your strings are the same length!"
last
}
}
View(describe_difference)
View(describe_difference)
describe_difference("boy", "girll")
# Exercise 4: functions and conditionals
# Define a function `is_twice_as_long` that takes in two character strings, and
# returns whether or not (e.g., a boolean) the length of one argument is greater
# than or equal to twice the length of the other.
# Hint: compare the length difference to the length of the smaller string
is_twice_as_long <- function(character1, character2) {
character1_length <- nchar(character1)
character2_length <- nchar(character2)
return (character1_length >= character2_length * 2 | character2_length >= character1_length * 2)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("hey", "girl")
# Define a function `describe_difference` that takes in two strings. The
# function should return one of the following sentences as appropriate
#   "Your first string is longer by N characters"
#   "Your second string is longer by N characters"
#   "Your strings are the same length!"
describe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
} else {
last <- "Your strings are the same length!"
last
}
}
# Call your `describe_difference` function by passing it different length strings
# to confirm that it works. Make sure to check all 3 conditions
describe_difference("brian", "boy")
describe_difference("brian", "boyorgirl")
describe_difference("brian", "bloob")
rm(list=ls())
is_twice_as_long <- function(character1, character2) {
character1_length <- nchar(character1)
character2_length <- nchar(character2)
return (character1_length >= character2_length * 2 | character2_length >= character1_length * 2)
}
is_twice_as_long("hey", "girl")
describe_difference <- function(string1, string2) {
if (nchar(string1) > nchar(string2)) {
first_diff <- nchar(string1) - nchar(string2)
first <- paste0("Your first string is longer by ", first_diff, " characters")
first
} else if (nchar(string2) > nchar(string1)) {
second_diff <- nchar(string2) - nchar(string1)
second <- paste0("Your second string is longer by ", second_diff, " characters")
second
} else {
last <- "Your strings are the same length!"
last
}
}
describe_difference("brian", "boy")
describe_difference("brian", "boyorgirl")
describe_difference("brian", "bloob")
names <- c("Brian", "Allison", "Kiley")
print(names)
n <- n[10:49]
n <- 10:49
length(n)
print(n + 1)
?seq
m <- seq(10, 1, -1)
print(m)
m-n
x_range <- seq(-5, 10, 0.1)
sin_wave <- sin(x_range)
cos_wave <- cos(x_range)
wave <- sin_wave * cos_wave + sin_wave
plot(wave)
install.packages("styler")
install.packages("lintr")
install.packages("stringr")
library(stringr)
remove_digits <- function(vector_of_strings) {
vector <- gsub("[0-9]", "", vector_of_strings)
vector
}
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
remove_digits <- function(vector_of_strings) {
vector <- gsub("\d", "", vector_of_strings)
vector
}
remove_digits <- function(vector_of_strings) {
vector <- gsub(\d, "", vector_of_strings)
vector
}
remove_digits <- function(vector_of_strings) {
vector <- gsub(\\d, "", vector_of_strings)
vector
}
remove_digits <- function(vector_of_strings) {
vector <- gsub([:digit:], "", vector_of_strings)
vector
}
remove_digits <- function(vector_of_strings) {
vector <- gsub("[:digit:]", "", vector_of_strings)
vector
}
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
remove_digits <- function(vector_of_strings) {
vector <- gsub("[:digit:]+", "", vector_of_strings)
vector
}
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
remove_digits <- function(vector_of_strings) {
vector <- gsub("[0123456789]+", "", vector_of_strings)
vector
}
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
remove_digits <- function(vector_of_strings) {
vector <- gsub("[:digit:]", "", vector_of_strings)
vector
}
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
remove_digits <- function(vector_of_strings) {
vector <- gsub("[:digit:]+", "", vector_of_strings)
vector
}
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
vector <- gsub("[:digit:]+", "", vector_of_strings)
vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
vector <- gsub("[0-9]+", "", vector_of_strings)
vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
remove_digits <- function(vector_of_strings) {
vector <- gsub("\d+", "", vector_of_strings)
vector
}
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
vector <- gsub("[[:digit:]]", "", vector_of_strings)
vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
vector <- gsub("[:digit:]", "", vector_of_strings)
vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
vector <- gsub("[[:digit:]]", "", vector_of_strings)
vector
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 143", "STAT 311", "ENGL 131"))
summer_break <- as.Date("2017/06/08")
today <- Sys.Date();
today <- as.Date(Sys.Date());
summer_break - today
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date();
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018/06/08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
summer_break - today
make_birthday_intro() <- function(name, age, character) {
make_introduction(name, age)
my_birthday <- as.Date("2018/05/05")
days_until_birthday <- my_birthday - today
return paste("In", days_until_birthday, "days I'll be", age + 1 ".")
}
make_birthday_intro() <- function(name, age, character) {
make_introduction(name, age)
my_birthday <- as.Date("2018/05/05")
days_until_birthday <- my_birthday - today
birthday <- paste("In", days_until_birthday, "days I'll be", age + 1, ".")
birt
make_birthday_intro() <- function(name, age, character) {
make_introduction(name, age)
my_birthday <- as.Date("2018/05/05")
days_until_birthday <- my_birthday - today
birthday <- paste("In", days_until_birthday, "days I'll be", age + 1, ".")
birthday
}
make_birthday_intro() <- function(name, age, upcoming_birthday) {
make_introduction(name, age)
days_until_birthday <- upcoming_birthday - today
birthday <- paste("In", days_until_birthday, "days I'll be", age + 1, ".")
birthday
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, upcoming_birthday)
34
4
4+4
4
4-4
make_birthday_intro() <- function(name, age, upcoming_birthday) {
make_introduction(name, age)
days_until_birthday <- upcoming_birthday - today
birthday <- paste("In", days_until_birthday, "days I'll be", age + 1, ".")
birthday
}
# and compute {N} and {new_age} in your function
make_birthday_intro() <- function(name, age, upcoming_birthday) {
# make_introduction(name, age)
days_until_birthday <- upcoming_birthday - today
birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
make_intro_and_bday <- paste(make_introduction(name,age), birthday)
birthday <- strsplit(make_intro_and_bday, "\n")
birthday
}
# and compute {N} and {new_age} in your function
make_birthday_intro() <- function(name, age) {
# make_introduction(name, age)
days_until_birthday <- upcoming_birthday - today
birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
make_intro_and_bday <- paste(make_introduction(name,age), birthday)
birthday <- strsplit(make_intro_and_bday, "\n")
birthday
}
make_birthday_intro <- function(name, age, upcoming_birthday) {
# make_introduction(name, age)
days_until_birthday <- upcoming_birthday - today
birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
make_intro_and_bday <- paste(make_introduction(name,age), birthday)
birthday <- strsplit(make_intro_and_bday, "\n")
birthday
}
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018/05/05")
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
make_intro_and_bday <- paste(make_introduction(name,age), birthday)
birthday <- strsplit(make_intro_and_bday, "\n")
birthday
}
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
View(my_bday_intro)
View(my_bday_intro)
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
make_intro_and_bday <- paste(make_introduction(name,age), birthday)
birthday2 <- strsplit(make_intro_and_bday, "\n")
birthday2
}
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
View(my_bday_intro)
View(my_bday_intro)
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
make_introduction(name, age)
birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
birthday
}
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
make_introduction(name, age)
# birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
return paste0(make_introduction(name, age), "\n", "In ", days_until_birthday, " days I'll be ", age + 1, ".")
# birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
}
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
return paste0(make_introduction(name, age), "\n", "In ", days_until_birthday, " days I'll be ", age + 1, ".")
}
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
paste0(make_introduction(name, age), "\n", "In ", days_until_birthday, " days I'll be ", age + 1, ".")
}
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
print(my_bday_intro)
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
paste0(make_introduction(name, age), \n, "In ", days_until_birthday, " days I'll be ", age + 1, ".")
}
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
paste0(make_introduction(name, age), "\n", "In ", days_until_birthday, " days I'll be ", age + 1, ".")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
print(my_bday_intro)
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
cat(make_introduction(name, age), "\n", "In ", days_until_birthday, " days I'll be ", age + 1, ".")
}
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
make_birthday_intro <- function(name, age, upcoming_birthday) {
days_until_birthday <- upcoming_birthday - today
birthday <- paste0("In ", days_until_birthday, " days I'll be ", age + 1, ".")
cat(make_introduction(name, age), "\n", birthday)
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018/05/05"))
shiny::runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
runApp()
<<<<<<< HEAD
runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
runApp('Documents/squadBF2')
=======
setwd("~/Desktop/INFO201/squadBF2")
runApp()
runApp()
runApp('Desktop/INFO201/squadBF2')
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
shiny::runApp('Desktop/INFO201/squadBF2')
# set credentials for the Spotify API
# IMPORTANT: set the "Redirect URI". Go to your Spotify application on the
# web, go to "Edit Settings", and under "Redirect URIs", type
# "http://localhost:1410/"
# first parameter: the name of your spotify application
# second parameter: your Client ID, set this in your own api_key.R
# third parameter: your Secret Client, set this in your own api_key.R
keys <- spotifyOAuth(app_id, client_id, client_secret)
# get features for songs in the playlist
get_playlist_features <- function(playlist_user, playlist_ID) {
# get playlist
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
# get playlist features
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- playlist[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
# combine playlist and playlist features
full_join(playlist, playlist_features_only)
}
runApp('Desktop/INFO201/squadBF2')
shiny::runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
View(artist)
View(artist)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
artist[, "display_name"]
View(artist)
View(artist)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
artist <- searchArtist(input$search, token = keys)
artist_selected <- input$selected_artist
artist <- searchArtist(input$search, token = keys)
runApp('Desktop/INFO201/squadBF2')
tabPanel(
"Search for an Artist",
titlePanel(
h1("Looking for an Artist?",
style = "color:cadetblue;padding-bottom:20px")
),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
style = "position:fixed;width:300px;color:cadetblue",
textInput("search", label = "Find an Artist", value = "")
),
selectInput(
"selected_artist",
label = "Artist",
choices = artist[, "display_name"]
)
)
),
artist <- searchArtist(input$search, token = keys)
runApp('Desktop/INFO201/squadBF2')
US_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbLRQDuF5jeBp")
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
US_top_50[, "artist"]
runApp('Desktop/INFO201/squadBF2')
shiny::runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
songs <- select(artist_selected$tracks)
artist_selected <- input$selected_artist
songs <- select(artist_selected$tracks)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
# get features for songs in the playlist
get_playlist_features <- function(playlist_user, playlist_ID) {
# get playlist
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
# get playlist features
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- playlist[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
# combine playlist and playlist features
full_join(playlist, playlist_features_only)
}
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
View(US_top_50)
View(US_top_50)
data <- US_top_50 %>% select(tracks, artist, x, y)
x <- input$selected_artist
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
data <- select(US_top_50, "Drake", tracks)
data <- select(US_top_50, Drake, tracks)
data <- select(US_top_50, artist = Drake, tracks)
data <- select(US_top_50, artist = "Drake", tracks)
data <- select(US_top_50, arist == "Drake", tracks)
data <- select(US_top_50, artist == "Drake", tracks)
data <- select(US_top_50, artist, tracks)
View(data)
View(data)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
data <- select(US_top_50, "Drake", Drake$tracks)
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
View(US_top_50)
View(US_top_50)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
shiny::runApp('Desktop/INFO201/squadBF2')
shiny::runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
# combine playlist and playlist features
full_join(playlist, playlist_features_only)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
# Combine playlist and playlist features
full_join(playlist, playlist_features_only)
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
global_top_50 <- get_playlist_features("spotifycharts",
"37i9dQZEVXbMDoHDwVN2tF")
# Get features for songs in the playlist
get_playlist_features <- function(playlist_user, playlist_ID) {
# Get playlist
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
# Get playlist features
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- playlist[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token = keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
# Combine playlist and playlist features
full_join(playlist, playlist_features_only)
}
global_top_50 <- get_playlist_features("spotifycharts",
"37i9dQZEVXbMDoHDwVN2tF")
# Get features for songs in the playlist
get_playlist_features <- function(playlist_user, playlist_ID) {
# Get playlist
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
# Get playlist features
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- playlist[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token = keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
# Combine playlist and playlist features
full_join(playlist, playlist_features_only)
}
global_top_50 <- get_playlist_features("spotifycharts",
"37i9dQZEVXbMDoHDwVN2tF")
get_playlist_features <- function(playlist_user, playlist_ID) {
# Get playlist
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
# Get playlist features
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- playlist[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token = keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
# Combine playlist and playlist features
full_join(playlist, playlist_features_only)
}
View(US_top_50)
View(US_top_50)
shiny::runApp('Desktop/INFO201/squadBF2')
# Sourcing credentials such as client ID and client secret
source("api_key.R")
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
shiny::runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
runApp('Desktop/INFO201/squadBF2')
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
# Set credentials for the Spotify API
# IMPORTANT: set the "Redirect URI". Go to your Spotify application on the
# web, go to "Edit Settings", and under "Redirect URIs", type
# "http://localhost:1410/"
# First parameter: the name of your spotify application
# Second parameter: your Client ID, set this in your own api_key.R
# Third parameter: your Secret Client, set this in your own api_key.R
keys <- spotifyOAuth(app_id, client_id, client_secret)
runApp('Desktop/INFO201/squadBF2')
>>>>>>> 50be632ea85e11e71661587ba723a893505fb3ed
