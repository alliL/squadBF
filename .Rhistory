h1("US Top 50 v.s. Global Top 50 Comparison",
style = "color:cadetblue;padding-bottom:20px"
)
),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
style = "position:fixed;width:300px;color:cadetblue",
# Add a select input for the x variable
p("The following graph shows a comparison of the US top 50 songs and
the global top 50 songs."),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = features,
selected = "popularity"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = features,
selected = "danceability"
)
),
# Create main panel to display scatter plot
mainPanel(
plotlyOutput("us_global")
)
)
),
# Create a tabPanel to show bar plot
tabPanel(
"About Us",
titlePanel(
h1("Meet the Team????",
style = "color:cadetblue;"
)
),
fluidPage(
h3("Allison Lee"),
h3("Brian Luu"),
h3("Tiffany Truong"),
h3("Maggie Wang"),
h3("Kiley Wong")
)
),
tabPanel(
"Feature v.s. Popularity",
titlePanel(
h1("Feature of Song and its relationship to Popularity",
style = "color:cadetblue;padding-bottom:20px"
)),
sidebarLayout(
sidebarPanel(
style = "position:fixed;width:300px;color:cadetblue",
p("Select the interest of feature of songs, and it will return
a bubble plot for the feature. One can see the relationship of
the feature and the popularity of the songs."),
selectInput(
"feature",
label = "Feature of the Song",
choices = features
)
),
mainPanel(
plotlyOutput("feature_bubble")
)
)
)
))
runApp()
# Make function which takes in audio features from "US_top_50"
# and shows a bubble chart the artists, track names, popularity, and selected feature.
# Set color and size of the bubbles by popularity.
bubble_plot <- function(feature){
p <- plot_ly(global_top_50, x = ~get(feature), y = ~artist,
color = ~popularity,
colors = "Set3", size = ~popularity, type = "scatter", mode = "markers",
marker = list(opacity = 0.85,
sizemode = "diameter"), hoverinfo = "text",
text = ~paste0("Artist: ", artist,"<br>Track: ", tracks,
"<br>Popularity: ", popularity,
"<br>", capitalize(feature), ": ", get(feature))) %>%
layout(title = paste0(capitalize(feature), " of US Top 50 Songs"),
margin = list(l = 150, r = 10, b = 30, t = 30),
xaxis = list(title = capitalize(feature), showgrid = FALSE),
yaxis = list(title = "Artist", showgrid = FALSE))
return(p)
}
runApp()
runApp()
bubble_plot("danceability")
runApp()
# Make function which takes in audio features from "US_top_50"
# and shows a bubble chart the artists, track names, popularity, and selected feature.
# Set color and size of the bubbles by popularity.
bubble_plot <- function(feature){
p <- plot_ly(global_top_50, x = ~get(feature), y = ~artist,
color = ~popularity,
colors = "Set3", size = ~popularity, type = "scatter", mode = "markers",
sizes = c(10, 50), marker = list(opacity = 0.85,
sizemode = "diameter"), hoverinfo = "text",
text = ~paste0("Artist: ", artist,"<br>Track: ", tracks,
"<br>Popularity: ", popularity,
"<br>", capitalize(feature), ": ", get(feature))) %>%
layout(title = paste0(capitalize(feature), " of US Top 50 Songs"),
margin = list(l = 150, r = 10, b = 30, t = 30),
xaxis = list(title = capitalize(feature), showgrid = FALSE),
yaxis = list(title = "Artist", showgrid = FALSE))
return(p)
}
bubble_plot("danceability")
runApp()
runApp()
runApp()
# used Rspotify library to access Spotify API
# see documentation here: https://www.r-bloggers.com/my-new-r-package/
library(Rspotify)
library(dplyr)
# sourcing credentials such as client ID and client secret
source("api_key.R")
# set credentials for the Spotify API
# IMPORTANT: set the "Redirect URI". Go to your Spotify application on the
# web, go to "Edit Settings", and under "Redirect URIs", type
# "http://localhost:1410/"
# first parameter: the name of your spotify application
# second parameter: your Client ID, set this in your own api_key.R
# third parameter: your Secret Client, set this in your own api_key.R
keys <- spotifyOAuth(app_id, client_id, client_secret)
# set credentials for the Spotify API
# IMPORTANT: set the "Redirect URI". Go to your Spotify application on the
# web, go to "Edit Settings", and under "Redirect URIs", type
# "http://localhost:1410/"
# first parameter: the name of your spotify application
# second parameter: your Client ID, set this in your own api_key.R
# third parameter: your Secret Client, set this in your own api_key.R
keys <- spotifyOAuth(app_id, client_id, client_secret)
# get features for songs in the playlist
get_playlist_features <- function(playlist_user, playlist_ID) {
# get playlist
playlist <- getPlaylistSongs(playlist_user, playlist_ID, token = keys)
# get playlist features
raw_playlist_features <- list()
for (row_num in 1:nrow(playlist)) {
song <- playlist[row_num, ]$id
raw_playlist_features[[row_num]] <- getFeatures(song, token=keys)
}
playlist_features_only = do.call(rbind, raw_playlist_features)
# combine playlist and playlist features
full_join(playlist, playlist_features_only)
}
library(shiny)
library(plotly)
library(dplyr)
library(Hmisc)
source("data_wrangling.R")
# Some playlists to get started.
# To get the "playlist user" and "playlist ID", right click on a spotify
# playlist and go to 'Share' > 'Copy Spotify URI'
# mood_booster <- get_playlist_features("spotify", "37i9dQZF1DX3rxVfibe1L0")
US_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbLRQDuF5jeBp")
global_top_50 <- get_playlist_features("spotifycharts", "37i9dQZEVXbMDoHDwVN2tF")
# top_tracks_2017 <- get_playlist_features("spotify", "37i9dQZF1DX5nwnRMcdReF")
feature_descriptions <- read.csv("data/feature_descriptions.csv")
# Make function which takes in audio features from "US_top_50"
# and shows a bubble chart the artists, track names, popularity, and selected feature.
# Set color and size of the bubbles by popularity.
bubble_plot <- function(feature){
p <- plot_ly(global_top_50, x = ~get(feature), y = ~artist,
color = ~popularity,
colors = "Set3", size = ~popularity, type = "scatter", mode = "markers",
sizes = c(10, 40), marker = list(opacity = 0.85,
sizemode = "diameter"), hoverinfo = "text",
text = ~paste0("Artist: ", artist,"<br>Track: ", tracks,
"<br>Popularity: ", popularity,
"<br>", capitalize(feature), ": ", get(feature))) %>%
layout(title = paste0(capitalize(feature), " of US Top 50 Songs"),
margin = list(l = 150, r = 10, b = 30, t = 30),
xaxis = list(title = capitalize(feature), showgrid = FALSE),
yaxis = list(title = "Artist", showgrid = FALSE))
return(p)
}
shinyServer(function(input, output) {
output$us_global <- renderPlotly({
x <- input$x_var
y <- input$y_var
us_data <- US_top_50 %>% select(tracks, artist_full, x, y)
us_data$type <- "US"
global_data <- global_top_50 %>% select(tracks, artist_full, x, y)
global_data$type <- "Global"
data <- rbind(us_data, global_data)
plot_ly(
data = data, type = "scatter", mode = "markers", x = ~ data[[x]],
y = ~ data[[y]], color = ~ type,
text = paste0(data$tracks, ", ", data$artist_full, "<br />", data$type)
) %>%
layout(
xaxis = list(title = x),
yaxis = list(title = y)
)
})
output$feature_descriptions <- renderTable(feature_descriptions)
output$feature_bubble <- renderPlotly({
return(bubble_plot(input$feature))
})
})
client_id <- "2ffd61181dc049fb9730e31ee11bad6d"
client_secret <- "4f13e8aa9a3f459896e39d238cf8f022"
app_id <- "Final Project"
library(shiny)
library(plotly)
library(dplyr)
colors <- list("Pink" = "#F9766E", "Blue" = "#619DFF", "Green" = "#01BA38")
features <- list(
"Popularity" = "popularity",
"Danceability" = "danceability",
"Energy" = "energy",
"Key" = "key",
"Loudness" = "loudness",
"Mode" = "mode",
"Speechiness" = "speechiness",
"Acousticness" = "acousticness",
"Instrumentalness" = "instrumenalness",
"Liveness" = "liveness",
"Valence" = "valence",
"Tempo" = "tempo",
"Duration (ms)" = "duration_ms"
)
shinyUI(navbarPage(
"Spotify Playlist Analysis",
# Create a tab panel for scatter plot
tabPanel(
"Home",
titlePanel(
h1("What can we learn using the Spotify API?",
style = "color:cadetblue;padding-bottom:20px"
)
),
fluidPage(
p(
"Using the",
a("Rspotify",
href = "https://www.r-bloggers.com/my-new-r-package/"
), "package to access Spotify API, we were able to analyze Spotify
playlists, artists, and features. Here is a list of song features:"
),
tableOutput('feature_descriptions')
)
),
# US vs. Global Top 50 Comparison
tabPanel(
"US v.s. Global",
titlePanel(
h1("US Top 50 v.s. Global Top 50 Comparison",
style = "color:cadetblue;padding-bottom:20px"
)
),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
style = "position:fixed;width:300px;color:cadetblue",
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = features,
selected = "popularity"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = features,
selected = "danceability"
)
),
# Create main panel to display scatter plot
mainPanel(
p(
"The following graph lets you compare attributes of the",
a("US Top 50",
href = "https://open.spotify.com/user/spotifycharts/playlist/37i9dQZEVXbLRQDuF5jeBp"
), "playlist and the", a("Global Top 50",
href = "https://open.spotify.com/user/spotifycharts/playlist/37i9dQZEVXbMDoHDwVN2tF"
), "playlist."
),
plotlyOutput("us_global")
)
)
),
tabPanel(
"Feature v.s. Popularity",
titlePanel(
h1("Feature of Song and its relationship to Popularity",
style = "color:cadetblue;padding-bottom:20px"
)
),
sidebarLayout(
sidebarPanel(
style = "position:fixed;width:300px;color:cadetblue",
p("Select the interest of feature of songs, and it will return
a bubble plot for the feature. One can see the relationship of
the feature and the popularity of the songs."),
selectInput(
"feature",
label = "Feature of the Song",
choices = features
)
),
mainPanel(
plotlyOutput("feature_bubble")
)
)
),
# Create a tabPanel to show bar plot
tabPanel(
"About Us",
titlePanel(
h1("Meet the Team",
style = "color:cadetblue;"
)
),
fluidPage(
h3("Allison Lee"),
h3("Brian Luu"),
h3("Tiffany Truong"),
h3("Maggie Wang"),
h3("Kiley Wong")
)
)
))
runApp()
# used Rspotify library to access Spotify API
# see documentation here: https://www.r-bloggers.com/my-new-r-package/
library(Rspotify)
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(navbarPage(
"Spotify Playlist Analysis",
# Create a tab panel for scatter plot
tabPanel(
"Home",
titlePanel(
h1("What can we learn using the Spotify API?",
style = "color:cadetblue;padding-bottom:20px"
)
),
fluidPage(
p(
"Using the",
a("Rspotify",
href = "https://www.r-bloggers.com/my-new-r-package/"
), "package to access Spotify API, we were able to analyze Spotify
playlists, artists, and features. Here is a list of song features:"
),
tableOutput('feature_descriptions')
)
),
# US vs. Global Top 50 Comparison
tabPanel(
"US v.s. Global",
titlePanel(
h1("US Top 50 v.s. Global Top 50 Comparison",
style = "color:cadetblue;padding-bottom:20px"
)
),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
style = "position:fixed;width:300px;color:cadetblue",
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = features,
selected = "popularity"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = features,
selected = "danceability"
)
),
# Create main panel to display scatter plot
mainPanel(
p(
"The following graph lets you compare attributes of the",
a("US Top 50",
href = "https://open.spotify.com/user/spotifycharts/playlist/37i9dQZEVXbLRQDuF5jeBp"
), "playlist and the", a("Global Top 50",
href = "https://open.spotify.com/user/spotifycharts/playlist/37i9dQZEVXbMDoHDwVN2tF"
), "playlist."
),
plotlyOutput("us_global")
)
)
),
tabPanel(
"Feature v.s. Popularity",
titlePanel(
h1("Feature of Song and its relationship to Popularity",
style = "color:cadetblue;padding-bottom:20px"
)
),
sidebarLayout(
sidebarPanel(
style = "position:fixed;width:300px;color:cadetblue",
p("Select the interest of feature of songs, and it will return
a bubble plot for the feature. One can see the relationship of
the feature and the popularity of the songs."),
selectInput(
"feature",
label = "Feature of the Song",
choices = features
)
),
mainPanel(
plotlyOutput("feature_bubble"),
p(style = "position:fixed;width:300px;color:cadetblue",
"When selecting feature and see its relationship with popularity,
one can see that most of the features don't really affect popularity
except one feature,", tags$b("ENERGY"), ".")
)
)
),
# Create a tabPanel to show bar plot
tabPanel(
"About Us",
titlePanel(
h1("Meet the Team",
style = "color:cadetblue;"
)
),
fluidPage(
h3("Allison Lee"),
h3("Brian Luu"),
h3("Tiffany Truong"),
h3("Maggie Wang"),
h3("Kiley Wong")
)
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p(style = "position:fixed;width:300px;color:cadetblue",
"When selecting feature and see its relationship with popularity,
one can see that most of the features don't really affect popularity
except one feature, ", tags$b("ENERGY."),
"The songs with the most popularity often has higher energy.")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?img
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
